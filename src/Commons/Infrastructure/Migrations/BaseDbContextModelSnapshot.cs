// <auto-generated />
using System;
using Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("AuthenId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AvatarId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("Point")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique()
                        .HasFilter("[AvatarId] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AUTH_User", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.UserRefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("RefreshExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AUTH_UserRefreshToken", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long>("RefreshTokenId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("AUTH_UserToken", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AuthenMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileNameUpload")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FilePathThumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AUTH_Media", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Function", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisplay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Url")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ControllerName")
                        .IsUnique();

                    b.HasIndex("ModuleId");

                    b.ToTable("AUTH_Function", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisplay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("AUTH_Module", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.FunctionAggregate.UserFunction", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("FunctionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "FunctionId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AUTH_UserFunction", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.LogAggregate.AuthenticationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Exception")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Level");

                    b.Property<string>("Message")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("MessageTemplate")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MessageTemplate");

                    b.Property<string>("Method")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Path")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeStamp");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("AUTH_Log", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.PermissionAggregate.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AUTH_Permission", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.PermissionAggregate.PermissionFunction", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("FunctionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("PermissionId", "FunctionId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("AUTH_PermissionFunction", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.PermissionAggregate.UserPermission", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("PermissionId", "UserId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("AUTH_UserPermission", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.Bike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BikeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("LocationId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("LockId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("LockId")
                        .IsUnique()
                        .HasFilter("[LockId] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.ToTable("Bike", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.BikeLock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("LockName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PathQr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Power")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PathQr")
                        .IsUnique();

                    b.ToTable("BikeLock", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeStationAggregate.BikeStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BikeId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("StationId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BikeId");

                    b.HasIndex("StationId");

                    b.ToTable("BikeStation", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.MapLocationAggregate.MapLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MapLocation", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.StationAggregate.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("NumOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvaiable")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.LogAggregate.MasterDataLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Exception")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Exception");

                    b.Property<string>("Level")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Level");

                    b.Property<string>("Message")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Message");

                    b.Property<string>("MessageTemplate")
                        .HasMaxLength(16383)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MessageTemplate");

                    b.Property<string>("Method")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Path")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("TimeStamp");

                    b.Property<string>("UserName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("MD_Log", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.Notification.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.Notification.UserNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .HasMaxLength(20)
                        .HasColumnType("bit");

                    b.Property<long>("NotificationId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotification", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.StatusAggregate.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.RateAggregate.Rate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("RateStar")
                        .HasMaxLength(1)
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("TripId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("TripId")
                        .IsUnique();

                    b.ToTable("Rate", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.RateAggregate.RateReply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("RateId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RateId");

                    b.HasIndex("SenderId");

                    b.ToTable("RateReply", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TicketAggregate.CategoryTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryTicketName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("Price")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CategoryTicket", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TicketAggregate.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BikeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("BookingDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("BookingTime")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("time");

                    b.Property<long>("CategoryTicketId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .HasMaxLength(255)
                        .HasColumnType("bit");

                    b.Property<string>("PathQr")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BikeId");

                    b.HasIndex("CategoryTicketId");

                    b.HasIndex("PathQr")
                        .IsUnique()
                        .HasFilter("[PathQr] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TripAggregate.Trip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasMaxLength(50)
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartDate")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasMaxLength(50)
                        .HasColumnType("time");

                    b.Property<long>("StationId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("bit");

                    b.Property<long>("TicketId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StationId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("Trip", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UnitAggregate.Unit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MD_Unit", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.AuthenticationAggregate.UserAuthentication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("IssueDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAuthentication", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.ComplainAggregate.Complain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("SenderId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Complain", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.ComplainAggregate.ComplainReply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ComplainId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("SenderId")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ComplainReply", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<long>("Point")
                        .HasMaxLength(20)
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("_Transaction", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.System.EmailServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Account")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("DefaultCredentials")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("EnableSsl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Host")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SYS_EmailService", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.System.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLog")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasMaxLength(16)
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Segment")
                        .IsUnique();

                    b.ToTable("SYS_Module", (string)null);
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AuthenMedia", "Avatar")
                        .WithOne("User")
                        .HasForeignKey("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "AvatarId");

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.StatusAggregate.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId");

                    b.Navigation("Avatar");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.UserRefreshToken", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.UserToken", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.UserRefreshToken", "RefreshToken")
                        .WithMany("UserTokens")
                        .HasForeignKey("RefreshTokenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefreshToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Function", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Module", "Module")
                        .WithMany("Functions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.FunctionAggregate.UserFunction", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Function", "Function")
                        .WithMany("UserFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithMany("UserFunctions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.PermissionAggregate.PermissionFunction", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Function", "Function")
                        .WithMany("PermissionFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.Authen.PermissionAggregate.Permission", "Permission")
                        .WithMany("PermissionFunctions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.PermissionAggregate.UserPermission", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.PermissionAggregate.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.Bike", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.MapLocationAggregate.MapLocation", "Location")
                        .WithOne("Bike")
                        .HasForeignKey("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.Bike", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.BikeLock", "BikeLock")
                        .WithOne("Bike")
                        .HasForeignKey("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.Bike", "LockId");

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.StatusAggregate.Status", "Status")
                        .WithMany("Bikes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BikeLock");

                    b.Navigation("Location");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeStationAggregate.BikeStation", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.Bike", "Bike")
                        .WithMany("StationChanges")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.StationAggregate.Station", "Station")
                        .WithMany("BikeChanges")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.StationAggregate.Station", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.MapLocationAggregate.MapLocation", "Location")
                        .WithOne("Station")
                        .HasForeignKey("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.StationAggregate.Station", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.StatusAggregate.Status", "Status")
                        .WithMany("Stations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.Notification.UserNotification", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.MasterData.Notification.Notification", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.RateAggregate.Rate", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "Sender")
                        .WithMany("Rates")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TripAggregate.Trip", "Trip")
                        .WithOne("Rate")
                        .HasForeignKey("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.RateAggregate.Rate", "TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.RateAggregate.RateReply", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.RateAggregate.Rate", "Rate")
                        .WithMany("Replys")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "Sender")
                        .WithMany("RateReplys")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rate");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TicketAggregate.Ticket", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.Bike", "Bike")
                        .WithMany("Tickets")
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TicketAggregate.CategoryTicket", "CategoryTicket")
                        .WithMany("Tickets")
                        .HasForeignKey("CategoryTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("CategoryTicket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TripAggregate.Trip", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.StationAggregate.Station", "EndStation")
                        .WithMany("Trips")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TicketAggregate.Ticket", "Ticket")
                        .WithOne("Trip")
                        .HasForeignKey("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TripAggregate.Trip", "TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndStation");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.AuthenticationAggregate.UserAuthentication", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithOne("AuthenticationInfo")
                        .HasForeignKey("Infrastructure.AggregatesModel.MasterData.UserAggregate.AuthenticationAggregate.UserAuthentication", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.ComplainAggregate.Complain", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "ComplainSender")
                        .WithMany("Complains")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComplainSender");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.ComplainAggregate.ComplainReply", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "Sender")
                        .WithMany("ComplainReplys")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Infrastructure.AggregatesModel.MasterData.UserAggregate.ComplainAggregate.Complain", "Complain")
                        .WithMany("ComplainReplys")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complain");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.Transaction", b =>
                {
                    b.HasOne("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.User", b =>
                {
                    b.Navigation("AuthenticationInfo");

                    b.Navigation("ComplainReplys");

                    b.Navigation("Complains");

                    b.Navigation("RateReplys");

                    b.Navigation("Rates");

                    b.Navigation("Tickets");

                    b.Navigation("Transactions");

                    b.Navigation("UserFunctions");

                    b.Navigation("UserNotifications");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRefreshTokens");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AccountAggregate.UserRefreshToken", b =>
                {
                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.AuthenMedia", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Function", b =>
                {
                    b.Navigation("PermissionFunctions");

                    b.Navigation("UserFunctions");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.FunctionAggregate.Module", b =>
                {
                    b.Navigation("Functions");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.Authen.PermissionAggregate.Permission", b =>
                {
                    b.Navigation("PermissionFunctions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.Bike", b =>
                {
                    b.Navigation("StationChanges");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.BikeAggregate.BikeLock", b =>
                {
                    b.Navigation("Bike");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.MapLocationAggregate.MapLocation", b =>
                {
                    b.Navigation("Bike");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.BikeManagementAggregate.StationAggregate.Station", b =>
                {
                    b.Navigation("BikeChanges");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.Notification.Notification", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.StatusAggregate.Status", b =>
                {
                    b.Navigation("Bikes");

                    b.Navigation("Stations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.RateAggregate.Rate", b =>
                {
                    b.Navigation("Replys");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TicketAggregate.CategoryTicket", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TicketAggregate.Ticket", b =>
                {
                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.TripManagementAggregate.TripAggregate.Trip", b =>
                {
                    b.Navigation("Rate");
                });

            modelBuilder.Entity("Infrastructure.AggregatesModel.MasterData.UserAggregate.ComplainAggregate.Complain", b =>
                {
                    b.Navigation("ComplainReplys");
                });
#pragma warning restore 612, 618
        }
    }
}
